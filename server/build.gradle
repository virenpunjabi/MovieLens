plugins {
    id 'java'
    id 'idea'
    id 'com.google.cloud.tools.jib' version '2.8.0'
}

def repoDir = "/Users/gourab/gradle/repo";
//def repoDir = project.properties['GRADLE_REPO_DIR']
println "RepoDir=$repoDir"

repositories {
    flatDir {
        dirs repoDir
    }
    mavenCentral()
}

ext {
    springBootVersion = '2.4.0'
    cloudConfigVersion = '3.0.0'
    lombokVersion = '1.18.12'
    esVersion = '7.10.1'
    swaggerVersion = '2.9.2'
    graphqlVersion = '15.0'
    graphqlExtendedVersion = '15.0.0'
    graphqlSpringBootVersion = '7.1.0'
}

dependencies {
    compile 'com.google.code.gson:gson:2.8.6'

    // spring boot
    compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"

    // spring cloud config
    compile "org.springframework.cloud:spring-cloud-starter-config:$cloudConfigVersion"
    compile "org.springframework.cloud:spring-cloud-starter-bootstrap:$cloudConfigVersion"

    // lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // elasticsearch
    compile "org.elasticsearch:elasticsearch:$esVersion"
    compile "org.elasticsearch.client:elasticsearch-rest-high-level-client:$esVersion"

    // swagger
    compile "io.springfox:springfox-swagger2:$swaggerVersion"
    compile "io.springfox:springfox-swagger-ui:$swaggerVersion"

    // graphql
    compile "com.graphql-java:graphql-java:$graphqlVersion"
    compile "com.graphql-java:graphql-java-extended-scalars:$graphqlExtendedVersion"
    compile "com.graphql-java-kickstart:graphql-spring-boot-starter:$graphqlSpringBootVersion"
    compile "com.graphql-java-kickstart:playground-spring-boot-starter:$graphqlSpringBootVersion"
}

group = 'edu.sampleprojects'
version = '1.0-SNAPSHOT'
description = 'MovieLens'
java.sourceCompatibility = JavaVersion.VERSION_11

def classpath = configurations.getByName("compile").resolve().collect {it.getName()}
def buildClasspath = classpath.join(":");
//println "buildClassPath = ${buildClasspath}"

def runtimeClasspath = classpath.collect{"file:///$repoDir/$it"}.join(" ");
println "runtimeClasspath = ${runtimeClasspath}"

jar {
    manifest {
        attributes (
            "Main-Class": 'edu.sampleproject.movielens.Application',
            "Build-Class-Path": buildClasspath,
            "Class-Path": runtimeClasspath
        )
    }
}

task copyDep(type: Copy) {
    from configurations.compile.resolve().findAll {!it.absolutePath.contains("${repoDir}")}
    into repoDir
}

//jib.to.image = 'roygou/movielens-jib:1.0.1'